[gd_scene load_steps=7 format=2]

[ext_resource path="res://resources/backgrounds/white.png" type="Texture" id=1]
[ext_resource path="res://scenes/levels/Test/Test.tscn" type="PackedScene" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

void fragment() {
    // Get the vertex color or the color from the texture if set
    vec4 finalColor = min(texture(TEXTURE, UV), COLOR);
    //vec3 finalColor = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0).rgb;

    if(AT_LIGHT_PASS) {
        // For all fragments in the light we just use the input color
        COLOR = finalColor;
    } else {
        // For all other fragments we make them B&W
        float value = dot(finalColor.rgb, vec3(0.2125, 0.7154, 0.0721));
        //value = dot(finalColor.rgb, vec3(0.1, 0.1, 0.1));
        COLOR = vec4(value, value, value, 1.0);
    }
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

// Gonkee's fog shader for Godot 3 - full tutorial https://youtu.be/QEaTsz_0o44
// If you use this shader, I would prefer it if you gave credit to me and my channel

uniform vec3 color = vec3(1.0, 1.0, 1.0);
uniform int OCTAVES = 512;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(56, 78)) * 1000.0) * 1000.0);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.2;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

void fragment() {
	vec2 coord = UV * 20.0;

	vec2 motion = vec2( fbm(coord + vec2(TIME * -0.5, TIME * 0.5)) );

	float final = fbm(coord + motion);

	COLOR = vec4(color.r * 1.0, color.g * 1.0, color.b * 0.7, final * 0.2);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/color = Vector3( 0.35, 0.48, 0.95 )
shader_param/OCTAVES = 4

[node name="Main" type="Node"]

[node name="Background" type="ParallaxBackground" parent="."]

[node name="ParallaxLayer" type="ParallaxLayer" parent="Background"]
motion_scale = Vector2( 0, 0 )

[node name="Void" type="Sprite" parent="Background/ParallaxLayer"]
modulate = Color( 0, 0, 0, 1 )
texture = ExtResource( 1 )

[node name="LevelContainer" type="Node" parent="."]

[node name="Test" parent="LevelContainer" instance=ExtResource( 2 )]
material = SubResource( 2 )

[node name="Foreground" type="ParallaxBackground" parent="."]
layer = 0

[node name="ParallaxLayer" type="ParallaxLayer" parent="Foreground"]
motion_scale = Vector2( 0.4, 0.4 )
motion_mirroring = Vector2( 3960, 3960 )

[node name="Fog" type="Sprite" parent="Foreground/ParallaxLayer"]
material = SubResource( 4 )
position = Vector2( 1.948, 0 )
texture = ExtResource( 1 )

[node name="CanvasModulate" type="CanvasModulate" parent="."]
color = Color( 0.0313726, 0.0313726, 0.0313726, 1 )
